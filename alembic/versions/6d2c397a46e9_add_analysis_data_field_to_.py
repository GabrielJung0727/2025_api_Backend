"""Add analysis_data field to DiagnosisResult

Revision ID: 6d2c397a46e9
Revises: 4444582f8338
Create Date: 2025-06-13 01:11:26.885173

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6d2c397a46e9'
down_revision: Union[str, None] = '4444582f8338'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_diagnostic_questions_id'), table_name='diagnostic_questions')
    op.drop_index(op.f('ix_diagnostic_questions_question_id'), table_name='diagnostic_questions')
    op.drop_table('diagnostic_questions')
    op.drop_index(op.f('idx_questions_opt_classification'), table_name='questions_optimized', postgresql_using='gin')
    op.drop_index(op.f('idx_questions_opt_created_at'), table_name='questions_optimized')
    op.drop_index(op.f('idx_questions_opt_metadata'), table_name='questions_optimized', postgresql_using='gin')
    op.drop_index(op.f('idx_questions_opt_number'), table_name='questions_optimized')
    op.drop_index(op.f('idx_questions_opt_type'), table_name='questions_optimized')
    op.drop_table('questions_optimized')
    op.drop_index(op.f('idx_users_opt_created_at'), table_name='users_optimized')
    op.drop_index(op.f('idx_users_opt_email'), table_name='users_optimized')
    op.drop_index(op.f('idx_users_opt_role'), table_name='users_optimized')
    op.drop_index(op.f('idx_users_opt_user_id'), table_name='users_optimized')
    op.drop_table('users_optimized')
    op.drop_index(op.f('ix_diagnostic_responses_id'), table_name='diagnostic_responses')
    op.drop_table('diagnostic_responses')
    op.drop_index(op.f('ix_diagnostic_submissions_id'), table_name='diagnostic_submissions')
    op.drop_table('diagnostic_submissions')
    op.drop_table('migration_log')
    op.drop_index(op.f('ix_student_diagnostic_history_id'), table_name='student_diagnostic_history')
    op.drop_table('student_diagnostic_history')
    op.drop_index(op.f('ix_diagnostic_tests_department'), table_name='diagnostic_tests')
    op.drop_index(op.f('ix_diagnostic_tests_id'), table_name='diagnostic_tests')
    op.drop_table('diagnostic_tests')
    op.add_column('diagnosis_results', sa.Column('analysis_data', sa.JSON(), nullable=True, comment='AI 분석 결과 및 상세 데이터'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('diagnosis_results', 'analysis_data')
    op.create_table('diagnostic_tests',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('diagnostic_tests_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('total_questions', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('time_limit', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('scoring_criteria', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='diagnostic_tests_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_diagnostic_tests_id'), 'diagnostic_tests', ['id'], unique=False)
    op.create_index(op.f('ix_diagnostic_tests_department'), 'diagnostic_tests', ['department'], unique=False)
    op.create_table('student_diagnostic_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('knowledge_states', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('learning_progression', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('skill_mastery', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('predicted_performance', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommended_actions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('student_diagnostic_history_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('student_diagnostic_history_pkey'))
    )
    op.create_index(op.f('ix_student_diagnostic_history_id'), 'student_diagnostic_history', ['id'], unique=False)
    op.create_table('migration_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('phase', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('operation', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('migration_log_pkey'))
    )
    op.create_table('diagnostic_submissions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('diagnostic_submissions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('test_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('total_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('correct_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('wrong_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unanswered_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('level_classification', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('diagnostic_result', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('bkt_analysis', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('dkt_analysis', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('rnn_analysis', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['test_id'], ['diagnostic_tests.id'], name='diagnostic_submissions_test_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='diagnostic_submissions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='diagnostic_submissions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_diagnostic_submissions_id'), 'diagnostic_submissions', ['id'], unique=False)
    op.create_table('diagnostic_responses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('submission_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_answer', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('is_correct', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('response_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('confidence_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('knowledge_state', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('answered_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['diagnostic_questions.id'], name=op.f('diagnostic_responses_question_id_fkey')),
    sa.ForeignKeyConstraint(['submission_id'], ['diagnostic_submissions.id'], name=op.f('diagnostic_responses_submission_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('diagnostic_responses_pkey'))
    )
    op.create_index(op.f('ix_diagnostic_responses_id'), 'diagnostic_responses', ['id'], unique=False)
    op.create_table('users_optimized',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('school', sa.VARCHAR(length=255), server_default=sa.text("'경복대학교'::character varying"), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=20), server_default=sa.text("'student'::character varying"), autoincrement=False, nullable=False),
    sa.Column('profile_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('account_status', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('agreements_verification', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('diagnosis_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('users_optimized_pkey')),
    sa.UniqueConstraint('email', name=op.f('users_optimized_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('user_id', name=op.f('users_optimized_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_users_opt_user_id'), 'users_optimized', ['user_id'], unique=False)
    op.create_index(op.f('idx_users_opt_role'), 'users_optimized', ['role'], unique=False)
    op.create_index(op.f('idx_users_opt_email'), 'users_optimized', ['email'], unique=False)
    op.create_index(op.f('idx_users_opt_created_at'), 'users_optimized', ['created_at'], unique=False)
    op.create_table('questions_optimized',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('question_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_type', sa.VARCHAR(length=50), server_default=sa.text("'multiple_choice'::character varying"), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('correct_answer', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('classification', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('question_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ai_integration', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('source_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('modification_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=768), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('questions_optimized_pkey'))
    )
    op.create_index(op.f('idx_questions_opt_type'), 'questions_optimized', ['question_type'], unique=False)
    op.create_index(op.f('idx_questions_opt_number'), 'questions_optimized', ['question_number'], unique=False)
    op.create_index(op.f('idx_questions_opt_metadata'), 'questions_optimized', ['question_metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_questions_opt_created_at'), 'questions_optimized', ['created_at'], unique=False)
    op.create_index(op.f('idx_questions_opt_classification'), 'questions_optimized', ['classification'], unique=False, postgresql_using='gin')
    op.create_table('diagnostic_questions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('test_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('question_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('options', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('correct_answer', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('area_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('original_question_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('difficulty', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('difficulty_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('question_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('domain', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('diagnostic_suitability', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('discrimination_power', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('points', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('source_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['test_id'], ['diagnostic_tests.id'], name=op.f('diagnostic_questions_test_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('diagnostic_questions_pkey'))
    )
    op.create_index(op.f('ix_diagnostic_questions_question_id'), 'diagnostic_questions', ['question_id'], unique=True)
    op.create_index(op.f('ix_diagnostic_questions_id'), 'diagnostic_questions', ['id'], unique=False)
    # ### end Alembic commands ###
