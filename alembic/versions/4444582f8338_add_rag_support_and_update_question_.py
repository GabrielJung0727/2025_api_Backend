"""Add RAG support and update question model

Revision ID: 4444582f8338
Revises: 6ce456f9a623
Create Date: 2025-06-07 15:15:35.558223

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4444582f8338'
down_revision: Union[str, None] = '6ce456f9a623'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_learning_profiles_level'), table_name='user_learning_profiles')
    op.drop_index(op.f('idx_learning_profiles_user_subject'), table_name='user_learning_profiles')
    op.drop_table('user_learning_profiles')
    op.drop_index(op.f('idx_learning_interactions_recommendation'), table_name='learning_interactions')
    op.drop_index(op.f('idx_learning_interactions_subject_type'), table_name='learning_interactions')
    op.drop_index(op.f('idx_learning_interactions_user_time'), table_name='learning_interactions')
    op.drop_table('learning_interactions')
    op.drop_index(op.f('idx_diagnosis_results_learning_level'), table_name='diagnosis_results')
    op.alter_column('questions', 'question_number',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('questions', 'description',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('questions', 'correct_answer',
               existing_type=sa.TEXT(),
               type_=sa.String(length=10),
               existing_nullable=True)
    op.alter_column('questions', 'difficulty',
               existing_type=postgresql.ENUM('EASY', 'MEDIUM', 'HARD', 'VERY_HARD', name='difficultylevel'),
               type_=sa.String(length=10),
               existing_nullable=True)
    op.drop_index(op.f('idx_questions_approval_status'), table_name='questions')
    op.drop_index(op.f('idx_questions_approved_by'), table_name='questions')
    op.drop_index(op.f('idx_questions_last_modified_at'), table_name='questions')
    op.drop_index(op.f('idx_questions_last_modified_by'), table_name='questions')
    op.drop_index(op.f('idx_questions_subject_name_difficulty'), table_name='questions', postgresql_where="((approval_status)::text = 'approved'::text)")
    op.drop_constraint(op.f('questions_subject_id_fkey'), 'questions', type_='foreignkey')
    op.drop_constraint(op.f('questions_created_by_id_fkey'), 'questions', type_='foreignkey')
    op.drop_constraint(op.f('questions_updated_by_id_fkey'), 'questions', type_='foreignkey')
    op.drop_constraint(op.f('questions_source_id_fkey'), 'questions', type_='foreignkey')
    op.drop_constraint(op.f('questions_original_id_fkey'), 'questions', type_='foreignkey')
    op.drop_column('questions', 'source_id')
    op.drop_column('questions', 'question_metadata')
    op.drop_column('questions', 'original_id')
    op.drop_column('questions', 'duplicate_count')
    op.drop_column('questions', 'updated_by_id')
    op.drop_column('questions', 'is_duplicate')
    op.drop_column('questions', 'specialization_level')
    op.drop_column('questions', 'created_by_id')
    op.drop_column('questions', 'professor_validation_level')
    op.drop_column('questions', 'usage_count')
    op.drop_column('questions', 'correct_rate')
    op.drop_column('questions', 'practical_application')
    op.drop_column('questions', 'subject_id')
    op.drop_column('questions', 'image_urls')
    op.drop_column('questions', 'choices')
    op.drop_index(op.f('idx_test_sessions_subject_status'), table_name='test_sessions')
    op.alter_column('verification_requests', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('verification_requests', 'submitted_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('verification_requests', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('verification_requests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_verification_request_number'), table_name='verification_requests')
    op.drop_index(op.f('idx_verification_status'), table_name='verification_requests')
    op.drop_index(op.f('idx_verification_user_id'), table_name='verification_requests')
    op.drop_constraint(op.f('verification_requests_request_number_key'), 'verification_requests', type_='unique')
    op.create_index(op.f('ix_verification_requests_id'), 'verification_requests', ['id'], unique=False)
    op.create_index(op.f('ix_verification_requests_request_number'), 'verification_requests', ['request_number'], unique=True)
    op.drop_constraint(op.f('verification_requests_user_id_fkey'), 'verification_requests', type_='foreignkey')
    op.create_foreign_key(None, 'verification_requests', 'users', ['user_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'verification_requests', type_='foreignkey')
    op.create_foreign_key(op.f('verification_requests_user_id_fkey'), 'verification_requests', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_verification_requests_request_number'), table_name='verification_requests')
    op.drop_index(op.f('ix_verification_requests_id'), table_name='verification_requests')
    op.create_unique_constraint(op.f('verification_requests_request_number_key'), 'verification_requests', ['request_number'])
    op.create_index(op.f('idx_verification_user_id'), 'verification_requests', ['user_id'], unique=False)
    op.create_index(op.f('idx_verification_status'), 'verification_requests', ['status'], unique=False)
    op.create_index(op.f('idx_verification_request_number'), 'verification_requests', ['request_number'], unique=False)
    op.alter_column('verification_requests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('verification_requests', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('verification_requests', 'submitted_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('verification_requests', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_index(op.f('idx_test_sessions_subject_status'), 'test_sessions', ['subject', 'status', sa.literal_column('completed_at DESC')], unique=False)
    op.add_column('questions', sa.Column('choices', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('image_urls', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('subject_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('practical_application', sa.TEXT(), autoincrement=False, nullable=True, comment='실무 적용 분야 및 설명'))
    op.add_column('questions', sa.Column('correct_rate', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('professor_validation_level', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True, comment='교수 검증 수준 (0:미검증, 1:1차검증, 2:2차검증, 3:최종승인)'))
    op.add_column('questions', sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('specialization_level', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True, comment='전문성 수준 (1:기초, 2:초급, 3:중급, 4:고급, 5:전문가)'))
    op.add_column('questions', sa.Column('is_duplicate', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('updated_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('duplicate_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('original_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('question_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('questions_original_id_fkey'), 'questions', 'questions', ['original_id'], ['id'])
    op.create_foreign_key(op.f('questions_source_id_fkey'), 'questions', 'sources', ['source_id'], ['id'])
    op.create_foreign_key(op.f('questions_updated_by_id_fkey'), 'questions', 'users', ['updated_by_id'], ['id'])
    op.create_foreign_key(op.f('questions_created_by_id_fkey'), 'questions', 'users', ['created_by_id'], ['id'])
    op.create_foreign_key(op.f('questions_subject_id_fkey'), 'questions', 'subjects', ['subject_id'], ['id'])
    op.create_index(op.f('idx_questions_subject_name_difficulty'), 'questions', ['subject_name', 'difficulty'], unique=False, postgresql_where="((approval_status)::text = 'approved'::text)")
    op.create_index(op.f('idx_questions_last_modified_by'), 'questions', ['last_modified_by'], unique=False)
    op.create_index(op.f('idx_questions_last_modified_at'), 'questions', ['last_modified_at'], unique=False)
    op.create_index(op.f('idx_questions_approved_by'), 'questions', ['approved_by'], unique=False)
    op.create_index(op.f('idx_questions_approval_status'), 'questions', ['approval_status'], unique=False)
    op.alter_column('questions', 'difficulty',
               existing_type=sa.String(length=10),
               type_=postgresql.ENUM('EASY', 'MEDIUM', 'HARD', 'VERY_HARD', name='difficultylevel'),
               existing_nullable=True)
    op.alter_column('questions', 'correct_answer',
               existing_type=sa.String(length=10),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('questions', 'description',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('questions', 'question_number',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_index(op.f('idx_diagnosis_results_learning_level'), 'diagnosis_results', ['user_id', 'learning_level', sa.literal_column('calculated_at DESC')], unique=False)
    op.create_table('learning_interactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('interaction_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('interaction_context', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('question_subject', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('question_difficulty', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('question_specialization_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_correct', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('time_spent_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confidence_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_state', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('recommendation_source', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("(interaction_type)::text = ANY ((ARRAY['view'::character varying, 'attempt'::character varying, 'skip'::character varying, 'review'::character varying, 'bookmark'::character varying, 'hint_used'::character varying])::text[])", name=op.f('learning_interactions_interaction_type_check')),
    sa.CheckConstraint('(confidence_level >= 1) AND (confidence_level <= 5)', name=op.f('learning_interactions_confidence_level_check')),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name=op.f('learning_interactions_question_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('learning_interactions_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('learning_interactions_pkey'))
    )
    op.create_index(op.f('idx_learning_interactions_user_time'), 'learning_interactions', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_learning_interactions_subject_type'), 'learning_interactions', ['question_subject', 'interaction_type', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_learning_interactions_recommendation'), 'learning_interactions', ['recommendation_source', 'is_correct', sa.literal_column('created_at DESC')], unique=False)
    op.create_table('user_learning_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('current_level', postgresql.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=False),
    sa.Column('target_level', postgresql.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.8'), autoincrement=False, nullable=True),
    sa.Column('preferred_difficulty', sa.VARCHAR(length=10), server_default=sa.text("'adaptive'::character varying"), autoincrement=False, nullable=True),
    sa.Column('learning_pace', sa.VARCHAR(length=20), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=True),
    sa.Column('weak_areas', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('strong_areas', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('topics_completed', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('topics_in_progress', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('next_recommended_topics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('total_problems_solved', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('correct_rate', postgresql.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('average_time_per_problem', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('streak_days', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_study_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint('(current_level >= (0.0)::double precision) AND (current_level <= (1.0)::double precision)', name=op.f('user_learning_profiles_current_level_check')),
    sa.CheckConstraint('(target_level >= (0.0)::double precision) AND (target_level <= (1.0)::double precision)', name=op.f('user_learning_profiles_target_level_check')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_learning_profiles_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_learning_profiles_pkey')),
    sa.UniqueConstraint('user_id', 'subject', name=op.f('user_learning_profiles_user_id_subject_key'))
    )
    op.create_index(op.f('idx_learning_profiles_user_subject'), 'user_learning_profiles', ['user_id', 'subject'], unique=False)
    op.create_index(op.f('idx_learning_profiles_level'), 'user_learning_profiles', ['current_level', 'subject'], unique=False)
    # ### end Alembic commands ###
