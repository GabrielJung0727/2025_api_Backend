"""Add diagnosis progress tables

Revision ID: dae1d8a124d1
Revises: add_round_number_001
Create Date: 2025-06-16 15:09:05.079896

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dae1d8a124d1'
down_revision: Union[str, None] = 'add_round_number_001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_diagnosis_responses_id'), table_name='diagnosis_responses')
    op.drop_index(op.f('ix_diagnosis_responses_question_id'), table_name='diagnosis_responses')
    op.drop_index(op.f('ix_diagnosis_responses_session_id'), table_name='diagnosis_responses')
    op.drop_table('diagnosis_responses')
    op.drop_index(op.f('ix_diagnosis_tests_created_at'), table_name='diagnosis_tests')
    op.drop_index(op.f('ix_diagnosis_tests_department'), table_name='diagnosis_tests')
    op.drop_index(op.f('ix_diagnosis_tests_id'), table_name='diagnosis_tests')
    op.drop_index(op.f('ix_diagnosis_tests_is_file_based'), table_name='diagnosis_tests')
    op.drop_index(op.f('ix_diagnosis_tests_source_file_path'), table_name='diagnosis_tests')
    op.drop_index(op.f('ix_diagnosis_tests_status'), table_name='diagnosis_tests')
    op.drop_index(op.f('ix_diagnosis_tests_subject_area'), table_name='diagnosis_tests')
    op.drop_table('diagnosis_tests')
    op.drop_index(op.f('ix_deepseek_learning_sessions_id'), table_name='deepseek_learning_sessions')
    op.drop_table('deepseek_learning_sessions')
    op.drop_index(op.f('ix_student_diagnosis_history_department'), table_name='student_diagnosis_history')
    op.drop_index(op.f('ix_student_diagnosis_history_id'), table_name='student_diagnosis_history')
    op.drop_index(op.f('ix_student_diagnosis_history_last_updated'), table_name='student_diagnosis_history')
    op.drop_index(op.f('ix_student_diagnosis_history_subject_area'), table_name='student_diagnosis_history')
    op.drop_index(op.f('ix_student_diagnosis_history_user_id'), table_name='student_diagnosis_history')
    op.drop_table('student_diagnosis_history')
    op.drop_table('users_backup')
    op.drop_index(op.f('ix_student_diagnosis_history_new_department'), table_name='student_diagnosis_history_new')
    op.drop_index(op.f('ix_student_diagnosis_history_new_id'), table_name='student_diagnosis_history_new')
    op.drop_index(op.f('ix_student_diagnosis_history_new_last_updated'), table_name='student_diagnosis_history_new')
    op.drop_index(op.f('ix_student_diagnosis_history_new_subject_area'), table_name='student_diagnosis_history_new')
    op.drop_index(op.f('ix_student_diagnosis_history_new_user_id'), table_name='student_diagnosis_history_new')
    op.drop_table('student_diagnosis_history_new')
    op.drop_index(op.f('ix_diagnosis_questions_id'), table_name='diagnosis_questions')
    op.drop_index(op.f('ix_diagnosis_questions_question_id'), table_name='diagnosis_questions')
    op.drop_index(op.f('ix_diagnosis_questions_test_id'), table_name='diagnosis_questions')
    op.drop_table('diagnosis_questions')
    op.drop_index(op.f('ix_diagnosis_sessions_created_at'), table_name='diagnosis_sessions')
    op.drop_index(op.f('ix_diagnosis_sessions_id'), table_name='diagnosis_sessions')
    op.drop_index(op.f('ix_diagnosis_sessions_session_token'), table_name='diagnosis_sessions')
    op.drop_index(op.f('ix_diagnosis_sessions_status'), table_name='diagnosis_sessions')
    op.drop_index(op.f('ix_diagnosis_sessions_test_id'), table_name='diagnosis_sessions')
    op.drop_index(op.f('ix_diagnosis_sessions_user_id'), table_name='diagnosis_sessions')
    op.drop_table('diagnosis_sessions')
    op.drop_index(op.f('ix_diagnosis_file_sync_status_is_active'), table_name='diagnosis_file_sync_status')
    op.drop_index(op.f('ix_diagnosis_file_sync_status_subject'), table_name='diagnosis_file_sync_status')
    op.drop_index(op.f('ix_diagnosis_file_sync_status_sync_status'), table_name='diagnosis_file_sync_status')
    op.drop_table('diagnosis_file_sync_status')
    op.drop_column('diagnosis_results', 'analysis_data')
    op.add_column('questions', sa.Column('classification', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('questions', sa.Column('question_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('questions', sa.Column('status_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('questions', sa.Column('ai_integration', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('questions', sa.Column('source_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('questions', 'embedding',
               existing_type=pgvector.sqlalchemy.vector.VECTOR(dim=1536),
               type_=pgvector.sqlalchemy.vector.VECTOR(dim=768),
               existing_nullable=True)
    op.alter_column('questions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('questions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_questions_created_at'), 'questions', ['created_at'], unique=False)
    op.create_index(op.f('ix_questions_question_number'), 'questions', ['question_number'], unique=False)
    op.drop_constraint(op.f('questions_approved_by_fkey'), 'questions', type_='foreignkey')
    op.drop_constraint(op.f('questions_last_modified_by_fkey'), 'questions', type_='foreignkey')
    op.drop_column('questions', 'llm_training_added')
    op.drop_column('questions', 'rag_indexed')
    op.drop_column('questions', 'explanation_confidence')
    op.drop_column('questions', 'approved_by')
    op.drop_column('questions', 'last_modified_by')
    op.drop_column('questions', 'parsed_data_path')
    op.drop_column('questions', 'difficulty')
    op.drop_column('questions', 'year')
    op.drop_column('questions', 'approved_at')
    op.drop_column('questions', 'last_modified_at')
    op.drop_column('questions', 'file_title')
    op.drop_column('questions', 'integration_completed_at')
    op.drop_column('questions', 'vector_db_indexed')
    op.drop_column('questions', 'ai_explanation')
    op.drop_column('questions', 'is_active')
    op.drop_column('questions', 'subject_name')
    op.drop_column('questions', 'source_file_path')
    op.drop_column('questions', 'approval_status')
    op.drop_column('questions', 'area_name')
    op.drop_column('questions', 'file_category')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('questions', sa.Column('file_category', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('area_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('approval_status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('source_file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('subject_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('questions', sa.Column('ai_explanation', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('vector_db_indexed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('integration_completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('file_title', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('last_modified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('difficulty', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('parsed_data_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('last_modified_by', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('explanation_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('rag_indexed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('llm_training_added', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('questions_last_modified_by_fkey'), 'questions', 'users', ['last_modified_by'], ['id'])
    op.create_foreign_key(op.f('questions_approved_by_fkey'), 'questions', 'users', ['approved_by'], ['id'])
    op.drop_index(op.f('ix_questions_question_number'), table_name='questions')
    op.drop_index(op.f('ix_questions_created_at'), table_name='questions')
    op.alter_column('questions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('questions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('questions', 'embedding',
               existing_type=pgvector.sqlalchemy.vector.VECTOR(dim=768),
               type_=pgvector.sqlalchemy.vector.VECTOR(dim=1536),
               existing_nullable=True)
    op.drop_column('questions', 'source_info')
    op.drop_column('questions', 'ai_integration')
    op.drop_column('questions', 'status_info')
    op.drop_column('questions', 'question_metadata')
    op.drop_column('questions', 'classification')
    op.add_column('diagnosis_results', sa.Column('analysis_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='AI 분석 결과 및 상세 데이터'))
    op.create_table('diagnosis_file_sync_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('last_modified', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_sync', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('sync_status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('question_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('diagnosis_file_sync_status_pkey'))
    )
    op.create_index(op.f('ix_diagnosis_file_sync_status_sync_status'), 'diagnosis_file_sync_status', ['sync_status'], unique=False)
    op.create_index(op.f('ix_diagnosis_file_sync_status_subject'), 'diagnosis_file_sync_status', ['subject'], unique=False)
    op.create_index(op.f('ix_diagnosis_file_sync_status_is_active'), 'diagnosis_file_sync_status', ['is_active'], unique=False)
    op.create_table('diagnosis_sessions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('diagnosis_sessions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('test_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('session_token', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('attempt_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('total_time_spent', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('raw_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('percentage_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scaled_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('response_stats', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('diagnosis_result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('advanced_analysis', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('session_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['test_id'], ['diagnosis_tests.id'], name='diagnosis_sessions_test_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='diagnosis_sessions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='diagnosis_sessions_pkey'),
    sa.UniqueConstraint('session_token', name='diagnosis_sessions_session_token_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_diagnosis_sessions_user_id'), 'diagnosis_sessions', ['user_id'], unique=False)
    op.create_index(op.f('ix_diagnosis_sessions_test_id'), 'diagnosis_sessions', ['test_id'], unique=False)
    op.create_index(op.f('ix_diagnosis_sessions_status'), 'diagnosis_sessions', ['status'], unique=False)
    op.create_index(op.f('ix_diagnosis_sessions_session_token'), 'diagnosis_sessions', ['session_token'], unique=False)
    op.create_index(op.f('ix_diagnosis_sessions_id'), 'diagnosis_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_diagnosis_sessions_created_at'), 'diagnosis_sessions', ['created_at'], unique=False)
    op.create_table('diagnosis_questions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('diagnosis_questions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('test_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('question_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('question_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('correct_answer', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('explanation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('classification', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('question_properties', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ai_analysis', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('source_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('original_question_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['test_id'], ['diagnosis_tests.id'], name='diagnosis_questions_test_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='diagnosis_questions_pkey'),
    sa.UniqueConstraint('question_id', name='diagnosis_questions_question_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_diagnosis_questions_test_id'), 'diagnosis_questions', ['test_id'], unique=False)
    op.create_index(op.f('ix_diagnosis_questions_question_id'), 'diagnosis_questions', ['question_id'], unique=False)
    op.create_index(op.f('ix_diagnosis_questions_id'), 'diagnosis_questions', ['id'], unique=False)
    op.create_table('student_diagnosis_history_new',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('subject_area', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('learning_progression', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('predictions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommendations', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('performance_stats', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('student_diagnosis_history_new_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('student_diagnosis_history_new_pkey'))
    )
    op.create_index(op.f('ix_student_diagnosis_history_new_user_id'), 'student_diagnosis_history_new', ['user_id'], unique=False)
    op.create_index(op.f('ix_student_diagnosis_history_new_subject_area'), 'student_diagnosis_history_new', ['subject_area'], unique=False)
    op.create_index(op.f('ix_student_diagnosis_history_new_last_updated'), 'student_diagnosis_history_new', ['last_updated'], unique=False)
    op.create_index(op.f('ix_student_diagnosis_history_new_id'), 'student_diagnosis_history_new', ['id'], unique=False)
    op.create_index(op.f('ix_student_diagnosis_history_new_department'), 'student_diagnosis_history_new', ['department'], unique=False)
    op.create_table('users_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('school', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('student_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_first_login', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('profile_image', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_login_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('terms_agreed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('privacy_agreed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('privacy_optional_agreed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('marketing_agreed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('identity_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('age_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('verification_method', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('admission_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('diagnostic_test_completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('diagnostic_test_completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('student_diagnosis_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('subject_area', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('learning_progression', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('predictions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommendations', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('performance_stats', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('student_diagnosis_history_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('student_diagnosis_history_pkey'))
    )
    op.create_index(op.f('ix_student_diagnosis_history_user_id'), 'student_diagnosis_history', ['user_id'], unique=False)
    op.create_index(op.f('ix_student_diagnosis_history_subject_area'), 'student_diagnosis_history', ['subject_area'], unique=False)
    op.create_index(op.f('ix_student_diagnosis_history_last_updated'), 'student_diagnosis_history', ['last_updated'], unique=False)
    op.create_index(op.f('ix_student_diagnosis_history_id'), 'student_diagnosis_history', ['id'], unique=False)
    op.create_index(op.f('ix_student_diagnosis_history_department'), 'student_diagnosis_history', ['department'], unique=False)
    op.create_table('deepseek_learning_sessions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('professor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('learning_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('context_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('result', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tokens_processed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('model_response', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('learning_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('batch_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['professor_id'], ['users.id'], name=op.f('deepseek_learning_sessions_professor_id_fkey')),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name=op.f('deepseek_learning_sessions_question_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('deepseek_learning_sessions_pkey'))
    )
    op.create_index(op.f('ix_deepseek_learning_sessions_id'), 'deepseek_learning_sessions', ['id'], unique=False)
    op.create_table('diagnosis_tests',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('diagnosis_tests_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('subject_area', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('test_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('scoring_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('analysis_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('test_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_published', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('publish_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('expire_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_file_based', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('source_file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('file_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('last_file_sync', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='diagnosis_tests_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='diagnosis_tests_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_diagnosis_tests_subject_area'), 'diagnosis_tests', ['subject_area'], unique=False)
    op.create_index(op.f('ix_diagnosis_tests_status'), 'diagnosis_tests', ['status'], unique=False)
    op.create_index(op.f('ix_diagnosis_tests_source_file_path'), 'diagnosis_tests', ['source_file_path'], unique=False)
    op.create_index(op.f('ix_diagnosis_tests_is_file_based'), 'diagnosis_tests', ['is_file_based'], unique=False)
    op.create_index(op.f('ix_diagnosis_tests_id'), 'diagnosis_tests', ['id'], unique=False)
    op.create_index(op.f('ix_diagnosis_tests_department'), 'diagnosis_tests', ['department'], unique=False)
    op.create_index(op.f('ix_diagnosis_tests_created_at'), 'diagnosis_tests', ['created_at'], unique=False)
    op.create_table('diagnosis_responses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_answer', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_correct', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('points_earned', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('response_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('first_response_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_view_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('response_behavior', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('cognitive_analysis', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('answered_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['diagnosis_questions.id'], name=op.f('diagnosis_responses_question_id_fkey')),
    sa.ForeignKeyConstraint(['session_id'], ['diagnosis_sessions.id'], name=op.f('diagnosis_responses_session_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('diagnosis_responses_pkey'))
    )
    op.create_index(op.f('ix_diagnosis_responses_session_id'), 'diagnosis_responses', ['session_id'], unique=False)
    op.create_index(op.f('ix_diagnosis_responses_question_id'), 'diagnosis_responses', ['question_id'], unique=False)
    op.create_index(op.f('ix_diagnosis_responses_id'), 'diagnosis_responses', ['id'], unique=False)
    # ### end Alembic commands ###
