"""Initial migration with all models

Revision ID: 468e28241915
Revises: 03bb1307e428
Create Date: 2025-05-30 19:04:50.524206

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# pgvector import
try:
    import pgvector.sqlalchemy
except ImportError:
    # pgvector가 없는 경우를 위한 대안
    pass

# revision identifiers, used by Alembic.
revision: str = '468e28241915'
down_revision: Union[str, None] = '03bb1307e428'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create enum types first
    op.execute("CREATE TYPE questiontype AS ENUM ('MULTIPLE_CHOICE', 'SHORT_ANSWER', 'TRUE_FALSE', 'MATCHING', 'ORDERING', 'FILL_IN_BLANK', 'ESSAY', 'OTHER')")
    op.execute("CREATE TYPE difficultylevel AS ENUM ('EASY', 'MEDIUM', 'HARD', 'VERY_HARD')")
    
    op.create_table('subjects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('code', sa.String(length=20), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['subjects.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_subjects_id'), 'subjects', ['id'], unique=False)
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    op.create_table('test_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('subject', postgresql.ENUM('COMPUTER_SCIENCE', 'DATA_STRUCTURE', 'ALGORITHM', 'DATABASE', 'PROGRAMMING', 'NETWORK', name='diagnosissubject'), nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'COMPLETED', 'EXPIRED', 'CANCELLED', name='diagnosisstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('max_time_minutes', sa.Integer(), nullable=True, comment='제한 시간 (분)'),
    sa.Column('total_questions', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_test_sessions_id'), 'test_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_test_sessions_status'), 'test_sessions', ['status'], unique=False)
    op.create_index(op.f('ix_test_sessions_user_id'), 'test_sessions', ['user_id'], unique=False)
    op.create_table('test_sets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('subject_id', sa.Integer(), nullable=True),
    sa.Column('time_limit_minutes', sa.Integer(), nullable=True),
    sa.Column('is_random_order', sa.Boolean(), nullable=True),
    sa.Column('is_published', sa.Boolean(), nullable=True),
    sa.Column('test_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_test_sets_id'), 'test_sets', ['id'], unique=False)
    op.create_table('answer_options',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('option_text', sa.Text(), nullable=False),
    sa.Column('option_label', sa.String(length=10), nullable=True),
    sa.Column('display_order', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_answer_options_id'), 'answer_options', ['id'], unique=False)
    op.create_table('diagnosis_results',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_session_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('learning_level', sa.Float(), nullable=False, comment='학습 수준 지표 (0.0-1.0)'),
    sa.Column('total_score', sa.Float(), nullable=False, comment='총 획득 점수'),
    sa.Column('max_possible_score', sa.Float(), nullable=False, comment='최대 가능 점수'),
    sa.Column('accuracy_rate', sa.Float(), nullable=False, comment='정답률 (0.0-1.0)'),
    sa.Column('total_questions', sa.Integer(), nullable=False),
    sa.Column('correct_answers', sa.Integer(), nullable=False),
    sa.Column('total_time_spent', sa.Integer(), nullable=True, comment='총 소요 시간 (초)'),
    sa.Column('difficulty_breakdown', sa.JSON(), nullable=True, comment='난이도별 성과 분석'),
    sa.Column('subject_breakdown', sa.JSON(), nullable=True, comment='과목별 성과 분석'),
    sa.Column('feedback_message', sa.Text(), nullable=True),
    sa.Column('recommended_next_steps', sa.JSON(), nullable=True, comment='추천 다음 단계'),
    sa.Column('percentile_rank', sa.Float(), nullable=True, comment='백분위 순위 (0.0-100.0)'),
    sa.Column('improvement_from_previous', sa.Float(), nullable=True, comment='이전 대비 향상도'),
    sa.Column('calculated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['test_session_id'], ['test_sessions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_diagnosis_results_id'), 'diagnosis_results', ['id'], unique=False)
    op.create_index(op.f('ix_diagnosis_results_learning_level'), 'diagnosis_results', ['learning_level'], unique=False)
    op.create_index(op.f('ix_diagnosis_results_test_session_id'), 'diagnosis_results', ['test_session_id'], unique=True)
    op.create_index(op.f('ix_diagnosis_results_user_id'), 'diagnosis_results', ['user_id'], unique=False)
    op.create_table('explanations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_explanations_id'), 'explanations', ['id'], unique=False)
    op.create_table('question_tags',
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('question_id', 'tag_id')
    )
    op.create_table('test_attempts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('test_set_id', sa.Integer(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('total_time_seconds', sa.Integer(), nullable=True),
    sa.Column('score', sa.Float(), nullable=True),
    sa.Column('max_score', sa.Float(), nullable=True),
    sa.Column('correct_count', sa.Integer(), nullable=True),
    sa.Column('question_count', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('attempt_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['test_set_id'], ['test_sets.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_test_attempts_id'), 'test_attempts', ['id'], unique=False)
    op.create_table('test_questions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_set_id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('display_order', sa.Integer(), nullable=True),
    sa.Column('points', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['test_set_id'], ['test_sets.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('test_set_id', 'question_id', name='uq_test_question')
    )
    op.create_index(op.f('ix_test_questions_id'), 'test_questions', ['id'], unique=False)
    op.create_table('test_responses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_session_id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('user_answer', sa.Text(), nullable=False),
    sa.Column('is_correct', sa.Boolean(), nullable=True),
    sa.Column('score', sa.Float(), nullable=True, comment='부분 점수 (0.0-1.0)'),
    sa.Column('time_spent_seconds', sa.Integer(), nullable=True, comment='풀이 시간 (초)'),
    sa.Column('answered_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('confidence_level', sa.Integer(), nullable=True, comment='확신도 (1-5)'),
    sa.Column('attempt_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['test_session_id'], ['test_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_test_responses_id'), 'test_responses', ['id'], unique=False)
    op.create_index(op.f('ix_test_responses_question_id'), 'test_responses', ['question_id'], unique=False)
    op.create_index(op.f('ix_test_responses_test_session_id'), 'test_responses', ['test_session_id'], unique=False)
    op.create_table('correct_answers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('answer_option_id', sa.Integer(), nullable=True),
    sa.Column('answer_text', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['answer_option_id'], ['answer_options.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_correct_answers_id'), 'correct_answers', ['id'], unique=False)
    op.create_table('learning_level_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('diagnosis_result_id', sa.Integer(), nullable=False),
    sa.Column('learning_level', sa.Float(), nullable=False, comment='학습 수준 지표'),
    sa.Column('subject', postgresql.ENUM('COMPUTER_SCIENCE', 'DATA_STRUCTURE', 'ALGORITHM', 'DATABASE', 'PROGRAMMING', 'NETWORK', name='diagnosissubject'), nullable=False),
    sa.Column('previous_level', sa.Float(), nullable=True, comment='이전 수준'),
    sa.Column('level_change', sa.Float(), nullable=True, comment='변화량'),
    sa.Column('change_percentage', sa.Float(), nullable=True, comment='변화율 (%)'),
    sa.Column('measurement_context', sa.JSON(), nullable=True, comment='측정 컨텍스트'),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('measured_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['diagnosis_result_id'], ['diagnosis_results.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_learning_level_history_diagnosis_result_id'), 'learning_level_history', ['diagnosis_result_id'], unique=False)
    op.create_index(op.f('ix_learning_level_history_id'), 'learning_level_history', ['id'], unique=False)
    op.create_index(op.f('ix_learning_level_history_learning_level'), 'learning_level_history', ['learning_level'], unique=False)
    op.create_index(op.f('ix_learning_level_history_measured_at'), 'learning_level_history', ['measured_at'], unique=False)
    op.create_index(op.f('ix_learning_level_history_subject'), 'learning_level_history', ['subject'], unique=False)
    op.create_index(op.f('ix_learning_level_history_user_id'), 'learning_level_history', ['user_id'], unique=False)
    op.create_table('user_answers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_attempt_id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('answer_option_id', sa.Integer(), nullable=True),
    sa.Column('answer_text', sa.Text(), nullable=True),
    sa.Column('is_correct', sa.Boolean(), nullable=True),
    sa.Column('points_earned', sa.Float(), nullable=True),
    sa.Column('time_spent_seconds', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['answer_option_id'], ['answer_options.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['test_attempt_id'], ['test_attempts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_answers_id'), 'user_answers', ['id'], unique=False)
    op.drop_index(op.f('idx_questions_vector_source_id'), table_name='questions_vector')
    op.drop_table('questions_vector')
    op.drop_table('question_vectors_backup')
    op.drop_table('questions_backup')
    op.drop_table('sources_backup')
    op.drop_table('answer_keys_backup')
    op.drop_index(op.f('idx_answer_keys_number'), table_name='answer_keys')
    op.drop_index(op.f('idx_answer_keys_source_id'), table_name='answer_keys')
    op.drop_table('answer_keys')
    op.drop_table('embeddings')
    op.add_column('questions', sa.Column('difficulty', sa.Enum('EASY', 'MEDIUM', 'HARD', 'VERY_HARD', name='difficultylevel'), nullable=True))
    op.add_column('questions', sa.Column('subject_id', sa.Integer(), nullable=True))
    op.add_column('questions', sa.Column('question_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('questions', sa.Column('image_urls', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('questions', sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True))
    # Add is_active column with default value first
    op.add_column('questions', sa.Column('is_active', sa.Boolean(), nullable=True, default=True))
    # Update existing records to have True value
    op.execute("UPDATE questions SET is_active = true WHERE is_active IS NULL")
    # Now add NOT NULL constraint
    op.alter_column('questions', 'is_active', nullable=False)
    op.add_column('questions', sa.Column('subject_name', sa.String(length=100), nullable=True))
    op.add_column('questions', sa.Column('choices', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('questions', sa.Column('correct_answer', sa.Text(), nullable=True))
    op.add_column('questions', sa.Column('created_by_id', sa.Integer(), nullable=True))
    op.add_column('questions', sa.Column('updated_by_id', sa.Integer(), nullable=True))
    op.add_column('questions', sa.Column('original_id', sa.Integer(), nullable=True))
    # Add is_duplicate column with default value first
    op.add_column('questions', sa.Column('is_duplicate', sa.Boolean(), nullable=True, default=False))
    # Update existing records to have False value
    op.execute("UPDATE questions SET is_duplicate = false WHERE is_duplicate IS NULL")
    # Now add NOT NULL constraint
    op.alter_column('questions', 'is_duplicate', nullable=False)
    op.add_column('questions', sa.Column('duplicate_count', sa.Integer(), nullable=True))
    op.add_column('questions', sa.Column('usage_count', sa.Integer(), nullable=True))
    op.add_column('questions', sa.Column('correct_rate', sa.Float(), nullable=True))
    op.add_column('questions', sa.Column('updated_at', sa.DateTime(), nullable=True))
    # Update existing Korean values to English enum values
    op.execute("""
        UPDATE questions SET question_type = 
        CASE 
            WHEN question_type = '객관식' THEN 'MULTIPLE_CHOICE'
            WHEN question_type = '주관식' THEN 'SHORT_ANSWER'
            WHEN question_type = '참/거짓' THEN 'TRUE_FALSE'
            WHEN question_type = '연결' THEN 'MATCHING'
            WHEN question_type = '순서' THEN 'ORDERING'
            WHEN question_type = '빈칸' THEN 'FILL_IN_BLANK'
            WHEN question_type = '서술형' THEN 'ESSAY'
            WHEN question_type = '기타' THEN 'OTHER'
            ELSE 'OTHER'
        END
        WHERE question_type IN ('객관식', '주관식', '참/거짓', '연결', '순서', '빈칸', '서술형', '기타')
    """)
    # Convert question_type from TEXT to ENUM with explicit casting
    op.execute("ALTER TABLE questions ALTER COLUMN question_type TYPE questiontype USING question_type::questiontype")
    op.alter_column('questions', 'question_type', nullable=False)
    op.drop_index(op.f('idx_questions_number'), table_name='questions')
    op.drop_index(op.f('idx_questions_source_id'), table_name='questions')
    op.create_index(op.f('ix_questions_id'), 'questions', ['id'], unique=False)
    op.create_foreign_key(None, 'questions', 'users', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'questions', 'subjects', ['subject_id'], ['id'])
    op.create_foreign_key(None, 'questions', 'users', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'questions', 'questions', ['original_id'], ['id'])
    op.drop_column('questions', 'question_number')
    op.drop_column('questions', 'answer')
    op.drop_column('questions', 'options')
    op.drop_column('questions', 'who_upload')
    op.add_column('sources', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('sources', sa.Column('url', sa.String(length=255), nullable=True))
    op.add_column('sources', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('sources', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('sources', 'type',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.create_index(op.f('ix_sources_id'), 'sources', ['id'], unique=False)
    op.drop_column('sources', 'exam_type')
    op.drop_column('sources', 'problem_count')
    op.drop_column('sources', 'subject')
    op.drop_column('sources', 'exam_round')
    op.drop_column('sources', 'who_upload')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('sources', sa.Column('who_upload', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sources', sa.Column('exam_round', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sources', sa.Column('subject', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sources', sa.Column('problem_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sources', sa.Column('exam_type', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_sources_id'), table_name='sources')
    op.alter_column('sources', 'type',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('sources', 'name',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('sources', 'updated_at')
    op.drop_column('sources', 'url')
    op.drop_column('sources', 'description')
    op.add_column('questions', sa.Column('who_upload', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('question_number', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'questions', type_='foreignkey')
    op.drop_constraint(None, 'questions', type_='foreignkey')
    op.drop_constraint(None, 'questions', type_='foreignkey')
    op.drop_constraint(None, 'questions', type_='foreignkey')
    op.drop_index(op.f('ix_questions_id'), table_name='questions')
    op.create_index(op.f('idx_questions_source_id'), 'questions', ['source_id'], unique=False)
    op.create_index(op.f('idx_questions_number'), 'questions', ['question_number'], unique=False)
    op.alter_column('questions', 'question_type',
               existing_type=sa.Enum('MULTIPLE_CHOICE', 'SHORT_ANSWER', 'TRUE_FALSE', 'MATCHING', 'ORDERING', 'FILL_IN_BLANK', 'ESSAY', 'OTHER', name='questiontype'),
               type_=sa.TEXT(),
               nullable=True)
    op.drop_column('questions', 'updated_at')
    op.drop_column('questions', 'correct_rate')
    op.drop_column('questions', 'usage_count')
    op.drop_column('questions', 'duplicate_count')
    op.drop_column('questions', 'is_duplicate')
    op.drop_column('questions', 'original_id')
    op.drop_column('questions', 'updated_by_id')
    op.drop_column('questions', 'created_by_id')
    op.drop_column('questions', 'correct_answer')
    op.drop_column('questions', 'choices')
    op.drop_column('questions', 'subject_name')
    op.drop_column('questions', 'is_active')
    op.drop_column('questions', 'embedding')
    op.drop_column('questions', 'image_urls')
    op.drop_column('questions', 'question_metadata')
    op.drop_column('questions', 'subject_id')
    op.drop_column('questions', 'difficulty')
    op.create_table('embeddings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('embedding_vector', postgresql.ARRAY(postgresql.DOUBLE_PRECISION(precision=53)), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name=op.f('embeddings_question_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('embeddings_pkey'))
    )
    op.create_table('answer_keys',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('question_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('correct_answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], name=op.f('answer_keys_source_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('answer_keys_pkey'))
    )
    op.create_index(op.f('idx_answer_keys_source_id'), 'answer_keys', ['source_id'], unique=False)
    op.create_index(op.f('idx_answer_keys_number'), 'answer_keys', ['question_number'], unique=False)
    op.create_table('answer_keys_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('question_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('correct_answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('sources_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('exam_round', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subject', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('exam_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('problem_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('who_upload', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('questions_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('question_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('question_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('who_upload', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('question_vectors_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('source_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('question_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('questions_vector',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('source_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('question_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('question_vectors_pkey'))
    )
    op.create_index(op.f('idx_questions_vector_source_id'), 'questions_vector', ['source_id'], unique=False)
    op.drop_index(op.f('ix_user_answers_id'), table_name='user_answers')
    op.drop_table('user_answers')
    op.drop_index(op.f('ix_learning_level_history_user_id'), table_name='learning_level_history')
    op.drop_index(op.f('ix_learning_level_history_subject'), table_name='learning_level_history')
    op.drop_index(op.f('ix_learning_level_history_measured_at'), table_name='learning_level_history')
    op.drop_index(op.f('ix_learning_level_history_learning_level'), table_name='learning_level_history')
    op.drop_index(op.f('ix_learning_level_history_id'), table_name='learning_level_history')
    op.drop_index(op.f('ix_learning_level_history_diagnosis_result_id'), table_name='learning_level_history')
    op.drop_table('learning_level_history')
    op.drop_index(op.f('ix_correct_answers_id'), table_name='correct_answers')
    op.drop_table('correct_answers')
    op.drop_index(op.f('ix_test_responses_test_session_id'), table_name='test_responses')
    op.drop_index(op.f('ix_test_responses_question_id'), table_name='test_responses')
    op.drop_index(op.f('ix_test_responses_id'), table_name='test_responses')
    op.drop_table('test_responses')
    op.drop_index(op.f('ix_test_questions_id'), table_name='test_questions')
    op.drop_table('test_questions')
    op.drop_index(op.f('ix_test_attempts_id'), table_name='test_attempts')
    op.drop_table('test_attempts')
    op.drop_table('question_tags')
    op.drop_index(op.f('ix_explanations_id'), table_name='explanations')
    op.drop_table('explanations')
    op.drop_index(op.f('ix_diagnosis_results_user_id'), table_name='diagnosis_results')
    op.drop_index(op.f('ix_diagnosis_results_test_session_id'), table_name='diagnosis_results')
    op.drop_index(op.f('ix_diagnosis_results_learning_level'), table_name='diagnosis_results')
    op.drop_index(op.f('ix_diagnosis_results_id'), table_name='diagnosis_results')
    op.drop_table('diagnosis_results')
    op.drop_index(op.f('ix_answer_options_id'), table_name='answer_options')
    op.drop_table('answer_options')
    op.drop_index(op.f('ix_test_sets_id'), table_name='test_sets')
    op.drop_table('test_sets')
    op.drop_index(op.f('ix_test_sessions_user_id'), table_name='test_sessions')
    op.drop_index(op.f('ix_test_sessions_status'), table_name='test_sessions')
    op.drop_index(op.f('ix_test_sessions_id'), table_name='test_sessions')
    op.drop_table('test_sessions')
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_subjects_id'), table_name='subjects')
    op.drop_table('subjects')
    
    # Drop enum types last
    op.execute("DROP TYPE IF EXISTS questiontype")
    op.execute("DROP TYPE IF EXISTS difficultylevel")
    # ### end Alembic commands ###
